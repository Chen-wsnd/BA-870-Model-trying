# -*- coding: utf-8 -*-
"""First model Example.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12hykQjnTtDP20aB88N6B9TDqwDXgU74j
"""



"""# New Section"""
import subprocess
import sys

# Install matplotlib if not available
try:
    import matplotlib.pyplot as plt
except ModuleNotFoundError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "matplotlib"])
    import matplotlib.pyplot as plt  # Retry importing after installation

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

Stock = pd.read_csv('https://drive.google.com/uc?export=download&id=1sGfS1tXBwKJdW1kOF1rGsFdtVK2IOWhZ')

Stock.info

"""Data dictionary:
- gvkey: Unique company identifier in Compustat.
- datadate: Date of the financial statement.
- fyear: Fiscal year of the financial statement.
- indfmt: Industry format (e.g., "INDL" for industrial).
- consol: Consolidation code (e.g., "C" for consolidated).
- popsrc: Population source for the data.
- datafmt: Data format (e.g., "STD" for standard).
- tic: Stock ticker symbol (e.g., AAPL, MSFT).
- curcd: Currency code (e.g., USD for U.S. dollars).
- costat: Company status (e.g., "A" for active).
- Financial Statement Items at (Total Assets): The sum of all company assets at a given time.
- cogs (Cost of Goods Sold): Direct costs of producing goods or services.
- dp (Depreciation & Amortization): Reduction in value of assets over time.
- gp (Gross Profit): Revenue minus cost of goods sold (gp = revt - cogs).
- invch (Change in Inventory): Difference in inventory levels from the previous period.
- lt (Total Liabilities): Sum of all company liabilities.
- ni (Net Income): Profit after all expenses and taxes.
- ppegt (Gross Property, Plant & Equipment): The value of fixed assets before depreciation.
- revt (Total Revenue): Total earnings from sales of goods and services.
- xsga (Selling, General & Administrative Expenses): Non-production expenses like marketing and salaries.

Unused or Empty Columns
- ugi: Unusual gains or income (completely empty in this dataset).
- urect: Unusual receivables (also completely empty).

"""

Stock.head(20)

from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import IsolationForest
from sklearn.svm import OneClassSVM


df= pd.read_csv('Stock.csv')
# Drop unnecessary columns
columns_to_drop = ["gvkey", "datadate", "indfmt", "consol", "popsrc", "datafmt", "curcd", "costat", "ugi", "urect"]
df.drop(columns=columns_to_drop, inplace=True)

# Convert fyear to datetime format
df['fyear'] = pd.to_datetime(df['fyear'], format='%Y')
# Feature Engineering
# Creating financial ratios
df['profit_margin'] = df['ni'] / df['revt']
df['leverage_ratio'] = df['lt'] / df['at']
df['asset_turnover'] = df['revt'] / df['at']
df['sga_to_revenue'] = df['xsga'] / df['revt']

# Handling missing values
numeric_cols = df.select_dtypes(include=np.number).columns
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].median())

# Normalize Data
scaler = StandardScaler()
numeric_cols = ["at", "cogs", "dp", "gp", "invch", "lt", "ni", "ppegt", "revt", "xsga", "profit_margin", "leverage_ratio", "asset_turnover", "sga_to_revenue"]
df_scaled = scaler.fit_transform(df[numeric_cols])

# Apply Isolation Forest
iso_forest = IsolationForest(n_estimators=100, contamination=0.1, random_state=42)
df['anomaly_if'] = iso_forest.fit_predict(df_scaled)

# Apply One-Class SVM
oc_svm = OneClassSVM(kernel='rbf', gamma='auto', nu=0.1)
df['anomaly_svm'] = oc_svm.fit_predict(df_scaled)

# Visualizing Anomalies
plt.figure(figsize=(12, 6))
sns.scatterplot(x=df['fyear'], y=df['profit_margin'], hue=df['anomaly_if'], palette={1:'blue', -1:'red'})
plt.title("Isolation Forest: Anomalies in Profit Margin Over Time")
plt.xlabel("Year")
plt.ylabel("Profit Margin")
plt.show()
plt.figure(figsize=(12, 6))
sns.scatterplot(x=df['fyear'], y=df['leverage_ratio'], hue=df['anomaly_svm'], palette={1:'blue', -1:'red'})
plt.title("One-Class SVM: Anomalies in Leverage Ratio Over Time")
plt.xlabel("Year")
plt.ylabel("Leverage Ratio")
plt.show()

numeric_cols = df.select_dtypes(include=np.number).columns
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].median())

# Normalize Data
scaler = StandardScaler()
numeric_cols = ["at", "cogs", "dp", "gp", "invch", "lt", "ni", "ppegt", "revt", "xsga", "profit_margin", "leverage_ratio", "asset_turnover", "sga_to_revenue"]
df_scaled = scaler.fit_transform(df[numeric_cols])

# Apply Isolation Forest
iso_forest = IsolationForest(n_estimators=100, contamination=0.1, random_state=42)
df['anomaly_if'] = iso_forest.fit_predict(df_scaled)

# Apply One-Class SVM
oc_svm = OneClassSVM(kernel='rbf', gamma='auto', nu=0.1)
df['anomaly_svm'] = oc_svm.fit_predict(df_scaled)

# Extract company names corresponding to blue and red points
anomalies_if = df[df['anomaly_if'] == -1]  # Red points (anomalies in Isolation Forest)
normal_if = df[df['anomaly_if'] == 1]  # Blue points (normal in Isolation Forest)

anomalies_svm = df[df['anomaly_svm'] == -1]  # Red points (anomalies in One-Class SVM)
normal_svm = df[df['anomaly_svm'] == 1]  # Blue points (normal in One-Class SVM)

# Display results
print("Companies detected as anomalies (red points) in Isolation Forest:")
print(anomalies_if[['tic', 'fyear', 'profit_margin', 'leverage_ratio']])

print("\nCompanies detected as normal (blue points) in Isolation Forest:")
print(normal_if[['tic', 'fyear', 'profit_margin', 'leverage_ratio']])

print("\nCompanies detected as anomalies (red points) in One-Class SVM:")
print(anomalies_svm[['tic', 'fyear', 'profit_margin', 'leverage_ratio']])

print("\nCompanies detected as normal (blue points) in One-Class SVM:")
print(normal_svm[['tic', 'fyear', 'profit_margin', 'leverage_ratio']])

numeric_cols = df.select_dtypes(include=np.number).columns
df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].median())

# Normalize Data
scaler = StandardScaler()
numeric_cols = ["at", "cogs", "dp", "gp", "invch", "lt", "ni", "ppegt", "revt", "xsga",
                "profit_margin", "leverage_ratio", "asset_turnover", "sga_to_revenue"]
df_scaled = scaler.fit_transform(df[numeric_cols])

# Apply Isolation Forest
iso_forest = IsolationForest(n_estimators=100, contamination=0.1, random_state=42)
df['anomaly_if'] = iso_forest.fit_predict(df_scaled)

# Apply One-Class SVM
oc_svm = OneClassSVM(kernel='rbf', gamma='auto', nu=0.1)
df['anomaly_svm'] = oc_svm.fit_predict(df_scaled)

# Visualization for Isolation Forest Anomalies
plt.figure(figsize=(12, 6))
sns.scatterplot(x=df['fyear'], y=df['profit_margin'], hue=df['anomaly_if'],
                palette={1: 'blue', -1: 'red'}, legend="full")

# Annotate red points with company names
for i in range(len(df)):
    if df['anomaly_if'].iloc[i] == -1:  # Only annotate anomalies
        plt.text(df['fyear'].iloc[i], df['profit_margin'].iloc[i],
                 df['tic'].iloc[i], fontsize=9, ha='right', color='black')

plt.title("Isolation Forest: Anomalies in Profit Margin Over Time")
plt.xlabel("Year")
plt.ylabel("Profit Margin")
plt.show()

# Visualization for One-Class SVM Anomalies
plt.figure(figsize=(12, 6))
sns.scatterplot(x=df['fyear'], y=df['leverage_ratio'], hue=df['anomaly_svm'],
                palette={1: 'blue', -1: 'red'}, legend="full")

# Annotate red points with company names
for i in range(len(df)):
    if df['anomaly_svm'].iloc[i] == -1:  # Only annotate anomalies
        plt.text(df['fyear'].iloc[i], df['leverage_ratio'].iloc[i],
                 df['tic'].iloc[i], fontsize=9, ha='right', color='black')

plt.title("One-Class SVM: Anomalies in Leverage Ratio Over Time")
plt.xlabel("Year")
plt.ylabel("Leverage Ratio")
plt.show()

